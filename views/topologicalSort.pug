doctype html
html
  head
    meta(charset='UTF-8')
    title Topological Sorting
    link(rel='stylesheet', href='/css/axisStyle.css', type='text/css')
  body
    script(src='http://d3js.org/d3.v3.min.js', charset='utf-8')
    script(src='/js/drawTable.js', type='text/javascript')
    script.
        // function
        function findPath(mid_name, vertex_dict, a, b, threLower, threUpper){
            // mid_name: the food name of the "middle" one on the path
            // not include if a*health_value + b*taste_value < threLower
            // include on both sides if a*health_value + b*teaste_value > threUpper

            // get tan
            mid_point = vertex_dict[mid_name]
            mid_x = mid_point[0]
            mid_y = mid_point[1]
            left = 0
            right = 0
            size = 0
            var tan = new Array()
            for(var name in vertex_dict){
                key = vertex_dict[name]
                size = size + 1
                key_x = key[0]
                key_y = key[1]
                if(key_x>mid_x || key_y>mid_y){
                    if(key_x - mid_x <= 0){
                        left = left + 1
                    }else if(key_y - mid_y <= 0){
                        right = right + 1
                    }else{

                        var t = (key_y - mid_y)/(key_x - mid_x)
                        tan.push(t)
                    }
                }
            }
            tan.sort()
            index = Math.floor(size/2 - 1) - right
            mid_tan = tan[index]

            // search path
            var path = [mid_name]
            mid_index = 0
            for(name in vertex_dict){
                key = vertex_dict[name]
                key_x = key[0]
                key_y = key[1]
                if(key_x <= mid_x && key_y <= mid_y|| key_x*a + key_y*b < threLower) continue
                if(key_y - mid_y > 0 && (key_x - mid_x <= 0 || (key_y - mid_y)/(key_x - mid_x) > mid_tan || key_x*a + key_y*b > threUpper)){
                    for(var i = 0; i < mid_index + 1; i++){
                        var t_name = path[i]
                        var t_point = vertex_dict[t_name]
                        if (key_y > t_point[1]){
                            mid_index++
                            path.splice(i, 0, name)
                            break
                        }
                    }
                }
                if(key_x - mid_x > 0 && (key_y - mid_y < 0 || (key_y - mid_y) / (key_x - mid_x) <= mid_tan || key_x*0.5 + key_y*0.5 > 6)){
                    var t_name = path[path.length-1]
                    var t_point = vertex_dict[t_name]
                    if(key_x > t_point[0]){
                        path.push(name)
                    }else{
                        for(var i = mid_index + 1; i < path.length; i++){
                            if(key_x < vertex_dict[path[i]][0]){
                                path.splice(i,0,name)
                                break
                            }
                        }
                    }
                }
            }
            return path
        }



        function drawPath(mid_name, path){
            var line_stroke = "red"
            var polyline_set = new Array()
            for(i = 0; i<path.length-1;i++){
                if(path[i] == mid_name){line_stroke = "green"};
                var name1 = path[i]
                var point1 = vertex_dict[name1]
                var name2 = path[i+1]
                var point2 = vertex_dict[name2]
                var points = (50*point1[0] + 20) + "," + (520 - 50*point1[1]) + " " + (50*point2[0] + 20) + "," + (520 - 50*point2[1])
                var style = "fill:none;stroke:" + line_stroke + ";stroke-width:2";  
                var polyline = [points,style]
                polyline_set.push(polyline)
            }
            svg.selectAll("polyline")
                .data(polyline_set)
                .enter()
                .append("polyline")
                .attr("points",function(d,i){
                        return d[0]})
                .attr("style", function(d,i){return d[1]})
        }

        
        // draw svg & axis
        var width = 550; 
        var height = 550; 

        var svg = d3.select("body")            
                    .append("svg")              
                    .attr("width", width)       
                    .attr("height", height); 
        var dataset = [ 0,1,2,3,4,5,6,7,8,9,10];
        var linearX = d3.scale.linear()
                .domain([0, d3.max(dataset)])
                .range([0, 500]);
        var linearY = d3.scale.linear()
                .domain([0, d3.max(dataset)])
                .range([500, 0]);
        var axisX = d3.svg.axis()
                    .scale(linearX)      //指定比例尺
                    .orient("bottom")   //指定刻度的方向
                    .ticks(11);          //指定刻度的数量
        svg.append("g")
            .attr("class","axis")
            .attr("transform","translate(20,520)")
            .call(axisX);
        var axisY = d3.svg.axis()
                    .scale(linearY) 
                    .orient("left")
                    .ticks(11);     
        svg.append("g")
            .attr("class","axis")
            .attr("transform","translate(20,20)")
            .call(axisY);

        // get data
        var vertex_dict = {}
        var points_set = new Array()
        var data = !{JSON.stringify(data)}
        var csvdata = data["csvdata"]
        var threLower = data["threLower"]
        var threUpper = data["threUpper"]
        console.log(threLower)

        

        for(var i=0;i<csvdata.length;i++){
            var t_name = csvdata[i]['id']
            var t_point = [csvdata[i]['RRR\''] * 1,csvdata[i]['T\'c'] * 1]
            vertex_dict[t_name] = t_point
            var point_dic = {"point":t_point, "name":t_name}
            points_set.push(point_dic)
        }
    
        // draw points
        svg.selectAll("circle")
            .data(points_set)
            .enter()
            .append("circle")
            .attr("stroke","blue")
            .attr("stroke-width","1")
            .attr("r","5")
            .attr("fill","blue")
            .attr("id",function(d,i){return d["name"]})
            .attr("cx",function(d,i){
                return d["point"][0]*50 + 20
            })
            .attr("cy",function(d,i){
                return 520 - d["point"][1]*50
            })

        // set mid_point
        //mid_name = "Filet-O-Fish"

        // set listener
        var circles = svg.selectAll("circle")
        circles.on("mouseover",function(d,i){
            d3.select(this)
                .transition()
                .duration(300)
                .attr("fill","yellow")
                .attr("r",10)
            svg.append("text")
                .attr("id","foodname")
                .attr("x", d["point"][0]*50+30)
                .attr("y", 520-d["point"][1]*50)
                .attr("fill","black")
                .text(d["name"])

            })
            .on("mouseout",function(d,i){
                d3.select(this)
                    .transition()
                    .duration(300)
                    .attr("fill","blue")
                    .attr("r", 5)
                // display the food name
                var txt = svg.selectAll("#foodname")
                    txt.remove()
            })
            .on("click",function(d,i){
                mid_name = d["name"];
                // remove the old path & table
                svg.selectAll("polyline").remove()
                d3.select("body").select("table").remove()
                // rebuild the path
                path = findPath(mid_name,vertex_dict,0.5,0.5,threLower,threUpper)
                drawPath(mid_name,path)
                drawTable(csvdata,mid_name,path)
            })
